// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //directUrl = env("DIRECT_URL")
}

model User {
  id               String    @id @default(uuid())
  name             String
  email            String    @unique
  password         String
  isAdmin          Boolean   @default(false)
  favoriteBooks    Book[]    @relation("VotedBooks")
  postedBooks      Book[]    @relation("UserToBooks")
  readBooks        Book[]    @relation("ReadBooks")
  hostedMeetings   Meeting[] @relation("hostToMeeting")
  attendedMeetings Meeting[] @relation("participantToMeeting")
}

model UnauthorizedUser {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String
}

model Book {
  id           String        @id @default(uuid())
  postAuthor   User          @relation("UserToBooks", fields: [postAuthorId], references: [id])
  postAuthorId String
  title        String        @unique
  author       String
  voters       User[]        @relation("VotedBooks")
  readers      User[]        @relation("ReadBooks")
  isRead       Boolean       @default(false)
  description  String        @default("")
  BookMetadata BookMetadata?
}

model BookMetadata {
  book              Book   @relation(fields: [bookId], references: [id])
  bookId            String @id
  year              Int
  authorNationality String
  authorGender      String
  pages             Int
  tags              Tag[]  @relation("BooksToTags")
}

model StaticMetadata {
  //responsibility: hold static metadata to aliviate the computation requirements
  //to make it possible to display statistics for client in a cost-effective manner
  data String
  id   Int    @id @default(1)
}

model Tag {
  id    String         @id @default(uuid())
  name  String         @unique
  books BookMetadata[] @relation("BooksToTags")
}

model Meeting {
  id           String   @id @default(uuid())
  host         User     @relation("hostToMeeting", fields: [hostId], references: [id])
  hostId       String
  date         DateTime @default(now())
  bookTitle    String
  address      String
  description  String   @default("")
  participants User[]   @relation("participantToMeeting")
}
